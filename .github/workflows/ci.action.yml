name: CI

on:
  push:
    paths-ignore:
      - "docs/**"
      - "**/*.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "**/*.md"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full
  RUST_LOG: debug

jobs:
  tests:
    name: CI (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest

    steps:
      # Checkout the repository
      - name: Checkout Sources
        uses:
          actions/checkout@v2

          # Cache cargo & rust
      - name: Cache cargo & rust
        id: cache-cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/target/
          key: ${{ runner.os }}-rust-cache

      # Install Rust toolchain
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        with:
          override: true
          toolchain: stable

      # Install dart
      - name: Install dart
        uses: dart-lang/setup-dart@v1

      # Run dart tests for all examples in `/examples`
      - name: Run dart tests for all examples in `/examples`
        shell: bash
        run: |
          cd examples
          for d in */ ; do
            mkdir -p target
            mkdir -p target/debug
            echo ":: ls target/debug (before test) ::"
            ls target/debug
            if [ "$d" == "target/" ]; then
              continue
            fi
            cd $d
            dart pub get
            dart test
            cd ..
            echo ":: ls target/debug (after test) ::"
            ls target/debug
          done

      # Run cargo tests for all targets in the `/examples` workspace
      - name: Run cargo tests for all targets in the `/examples` workspace
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path ./examples/Cargo.toml --all-targets --all-features

      # Run cargo tests for all targets in the `/tests` workspace
      - name: Run cargo tests for all targets in the `/tests` workspace
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path ./tests/Cargo.toml --all-targets --all-features

      # Run cargo tests for all targets in the root workspace
      - name: Run cargo tests for all targets in the root workspace
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-targets --all-features
